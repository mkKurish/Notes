<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="faqListBox.Text" xml:space="preserve">
    <value>Программа "Заметки"

Данная программа создана для того, чтобы упростить ведение заметок (создание, хранение, просмотр, удаление, изменение).


Программа предоставляет следующий функционал:

1 ---&gt; Создание заметки
На главном экране нажмите кнопку "Создать". В появивщейся форме введите необходимые данные (заголовок, тему, цвет темы, содержание заметки). Нажмите на кнопку "Создать" для подтверждения создания.

2 ---&gt; Изменение заметки
На главном экране два раза быстро нажмите на нужную заметку. В появивщейся ворме измените необходимые данные. Подтвердите изменения, нажав на кнопку "Сохранить".

3 ---&gt; Удаление заметки
На главном экране нажмите один раз на нужную заметку. Нажмите на кнопку "Удалить". Если вы не отключали режим безопасного удаления, в появившейся форме подтвердите удаление заметки кнопкой "Удалить". Если безопасный режим удаления отключен, заметка удалится без запроса подтверждения.

4 ---&gt; Переключение режима удаления
На главном экране нажмите кнопку настроек (с изображением шестеренки). В открывшейся форме выберите режим удаления с помощью соответствующей галки настройки. Закройте форму настроек.

5 ---&gt; Выбор способа отображения заметок
На главном экране нажмите кнопку "Отображение". В появившемся меню выберете нужный режим отображения.
1) Режим "По датам" - заметки выводятся в порядке по дате и времени добавления
2) Режим "По темам" - заметки сгруппированы в блоки по темам

6 ---&gt; Выбор отображаемых тем
На главном экране нажмите кнопку "Выбор тем". Выберете необходимые темы одноразовыми нажатиями мыши по ним. Нажмите "Очистить выбор" в случае, если необходимо снять ограничения на темы выводимых заметок.

7 ---&gt; Сброс настроек
Сброс настроек устанавливает режим безопасного удаления включенным, очищает выбор отображаемых тем заметок и устанавливает способ отображения по дате. 
На главном экране нажмите кнопку настроек (с изображением шестеренки). В открывшейся форме нажмите на кнопку "Сбросить настройки". Закройте форму настроек.


Для получения дополнительной информации перейдите по ссылке https://github.com/mkKurish/Notes или свяжитесь с автором программы.

Автор:
Куриш Михаил Викторович
ГУАП, гр №4232
kypten.wave@gmail.com</value>
  </data>
</root>